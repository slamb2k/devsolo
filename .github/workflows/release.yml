name: Release

on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: true
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Get current version
        id: current-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Get last release tag
        id: last-tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "sha=$(git rev-list -n 1 $LAST_TAG 2>/dev/null || git rev-list --max-parents=0 HEAD)" >> $GITHUB_OUTPUT

      - name: Analyze commits for version bump
        id: analyze
        run: |
          # Get commits since last tag
          COMMITS=$(git log --pretty=format:"%s" ${{ steps.last-tag.outputs.sha }}..HEAD)

          # Determine bump type based on conventional commits
          BUMP_TYPE="patch"

          if echo "$COMMITS" | grep -qE "^(feat|fix|perf|refactor)!:|BREAKING CHANGE:"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
            BUMP_TYPE="minor"
          fi

          echo "type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Determined bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new-version
        run: |
          CURRENT="${{ steps.current-version.outputs.version }}"
          BUMP_TYPE="${{ steps.analyze.outputs.type }}"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "✓ Version bump: $CURRENT → $NEW_VERSION ($BUMP_TYPE)"

      - name: Update package.json version
        run: npm version ${{ steps.new-version.outputs.version }} --no-git-tag-version

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to ${{ steps.new-version.outputs.version }} [skip ci]"
          git push

      - name: Create git tag
        run: |
          git tag -a "v${{ steps.new-version.outputs.version }}" -m "Release v${{ steps.new-version.outputs.version }}"
          git push origin "v${{ steps.new-version.outputs.version }}"

      - name: Generate professional changelog
        id: changelog
        run: |
          # Generate changelog using conventional-changelog
          npx conventional-changelog -p angular -r 1 -o CHANGELOG_TEMP.md

          # Capture changelog content for GitHub Release
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Also update the CHANGELOG.md file for the repository
          if [ -f CHANGELOG.md ]; then
            npx conventional-changelog -p angular -i CHANGELOG.md -s
          else
            npx conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new-version.outputs.version }}
          release_name: Release v${{ steps.new-version.outputs.version }}
          body: ${{ steps.changelog.outputs.changes }}
          draft: false
          prerelease: false

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}