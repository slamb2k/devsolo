import { Configuration } from '../models/configuration';
export declare class ConfigurationManager {
    private configPath;
    private config;
    private fileWatcher;
    constructor(basePath?: string);
    load(): Promise<Configuration>;
    save(config?: Configuration): Promise<void>;
    loadConfig(): Promise<Configuration>;
    saveConfig(config: Configuration): Promise<void>;
    loadConfiguration(): Promise<Configuration>;
    saveConfiguration(config: Configuration): Promise<void>;
    createDefaultConfiguration(): Promise<Configuration>;
    initialize(): Promise<Configuration>;
    exists(): Promise<boolean>;
    isInitialized(): Promise<boolean>;
    validate(): Promise<boolean>;
    getInstallPath(): Promise<string>;
    getSessionsPath(): Promise<string>;
    getAuditPath(): Promise<string>;
    getHooksPath(): Promise<string>;
    getTemplatesPath(): Promise<string>;
    updatePreferences(preferences: Partial<typeof Configuration.prototype.preferences>): Promise<Configuration>;
    updateGitPlatform(platform: typeof Configuration.prototype.gitPlatform): Promise<Configuration>;
    enableComponent(component: keyof typeof Configuration.prototype.components): Promise<Configuration>;
    disableComponent(component: keyof typeof Configuration.prototype.components): Promise<Configuration>;
    watchForChanges(callback: (config: Configuration) => void): Promise<void>;
    stopWatching(): Promise<void>;
    getGitPlatformToken(): Promise<string | null>;
    installHooks(): Promise<void>;
    installClaudeGuidance(): Promise<void>;
    private getHanSoloSection;
    removeClaudeGuidance(): Promise<void>;
    installTemplates(): Promise<void>;
    setSetting(key: string, value: any): Promise<void>;
    setWorkflowConfig(workflowType: string, config: any): Promise<void>;
    get(key: string): any;
    set(key: string, value: any): Promise<void>;
}
//# sourceMappingURL=configuration-manager.d.ts.map